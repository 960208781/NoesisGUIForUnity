//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

[StructLayoutAttribute(LayoutKind.Sequential, CharSet = CharSet.Ansi)]
public struct Int32Rect {

  [MarshalAs(UnmanagedType.I4)]
  private int _x;

  [MarshalAs(UnmanagedType.I4)]
  private int _y;

  [MarshalAs(UnmanagedType.U4)]
  private uint _width;

  [MarshalAs(UnmanagedType.U4)]
  private uint _height;

  public Int32Rect(int x, int y, int width, int height) {
    _x = x;
    _y = y;
    _width = width > 0 ? (uint)width : 0;
    _height = height > 0 ? (uint)height : 0;
  }

  public static Int32Rect Empty {
    get { return _empty; }
  }

  public bool IsEmpty {
    get { return _x == 0 && _y == 0 && _width == 0 && _height == 0; }
  }

  public bool HasArea {
    get { return _width > 0 && _height > 0; }
  }

  public int X {
    get { return _x; }
    set { _x = value; }
  }

  public int Y {
    get { return _y; }
    set { _y = value; }
  }

  public int Width {
    get { return (int)_width; }
    set { _width = value > 0 ? (uint)value : 0; }
  }

  public int Height {
    get { return (int)_height; }
    set { _height = value > 0 ? (uint)value : 0; }
  }

  public static bool operator==(Int32Rect r0, Int32Rect r1) {
    return r0.X == r1.X && r0.Y == r1.Y && r0.Width == r1.Width && r0.Height == r1.Height;
  }

  public static bool operator!=(Int32Rect r0, Int32Rect r1) {
    return !(r0 == r1);
  }

  public bool Equals(Int32Rect r0, Int32Rect r1) {
    return r0 == r1;
  }

  public override bool Equals(Object obj) {
    return obj is Int32Rect && this == (Int32Rect)obj;
  }

  public bool Equals(Int32Rect r) {
    return this == r;
  }

  public override int GetHashCode() {
    if (IsEmpty) {
      return 0;
    }
    else {
      return X.GetHashCode() ^ Y.GetHashCode() ^ Width.GetHashCode() ^ Height.GetHashCode();
    }
  }

  public override string ToString() {
    if (IsEmpty) {
      return "Empty";
    }
    else {
      return String.Format("{0},{1},{2},{3}", X, Y, Width, Height);
    }
  }

  public static Int32Rect Parse(string str) {
    Int32Rect r;
    if (Int32Rect.TryParse(str, out r)) {
      return r;
    }
    throw new ArgumentException("Cannot create Int32Rect from '" + str + "'");
  }

  #region Empty rect
  private static readonly Int32Rect _empty = new Int32Rect(0, 0, 0, 0);
  #endregion

  public static bool TryParse(string str, out Int32Rect result) {
    bool ret = NoesisGUI_PINVOKE.Int32Rect_TryParse(str != null ? str : string.Empty, out result);
    return ret;
  }

}

}

