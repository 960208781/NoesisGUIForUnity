//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;
using System.Collections.Generic;

namespace Noesis
{

public class Clock : BaseComponent {
  internal new static Clock CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new Clock(cPtr, cMemoryOwn);
  }

  internal Clock(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(Clock obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected Clock() {
  }

  #region Events
  #region Completed
  public delegate void CompletedHandler(object sender, EventArgs e);
  public event CompletedHandler Completed {
    add {
      long ptr = swigCPtr.Handle.ToInt64();
      if (!_Completed.ContainsKey(ptr)) {
        _Completed.Add(ptr, null);

        NoesisGUI_PINVOKE.BindEvent_Clock_Completed(_raiseCompleted, swigCPtr.Handle);
      }

      _Completed[ptr] += value;
    }
    remove {
      long ptr = swigCPtr.Handle.ToInt64();
      if (_Completed.ContainsKey(ptr)) {

        _Completed[ptr] -= value;

        if (_Completed[ptr] == null) {
          NoesisGUI_PINVOKE.UnbindEvent_Clock_Completed(_raiseCompleted, swigCPtr.Handle);

          _Completed.Remove(ptr);
        }
      }
    }
  }

  internal delegate void RaiseCompletedCallback(IntPtr cPtr, IntPtr sender, IntPtr e);
  private static RaiseCompletedCallback _raiseCompleted = RaiseCompleted;

  [MonoPInvokeCallback(typeof(RaiseCompletedCallback))]
  private static void RaiseCompleted(IntPtr cPtr, IntPtr sender, IntPtr e) {
    try {
      if (Noesis.Extend.Initialized) {
        long ptr = cPtr.ToInt64();
        if (sender == IntPtr.Zero && e == IntPtr.Zero) {
          _Completed.Remove(ptr);
          return;
        }
        CompletedHandler handler = null;
        if (!_Completed.TryGetValue(ptr, out handler)) {
          throw new InvalidOperationException("Delegate not registered for Completed event");
        }
        handler?.Invoke(Noesis.Extend.GetProxy(sender, false), new EventArgs(e, false));
      }
    }
    catch (Exception exception) {
      Noesis.Error.UnhandledException(exception);
    }
  }

  internal static Dictionary<long, CompletedHandler> _Completed =
      new Dictionary<long, CompletedHandler>();
  #endregion

  #endregion

  public int? CurrentIteration {
    get {
      return GetCurrentIteration();
    }
  }

  public float? CurrentProgress {
    get {
      return GetCurrentProgress();
    }
  }

  public TimeSpan? CurrentTime {
    get {
      return TimeSpan.FromSeconds(GetCurrentTime());
    }
  }

  private int GetCurrentIteration() {
    int ret = NoesisGUI_PINVOKE.Clock_GetCurrentIteration__SWIG_0(swigCPtr);
    return ret;
  }

  public double GetCurrentTime() {
    double ret = NoesisGUI_PINVOKE.Clock_GetCurrentTime__SWIG_0(swigCPtr);
    return ret;
  }

  public ClockState CurrentState {
    get {
      ClockState ret = (ClockState)NoesisGUI_PINVOKE.Clock_CurrentState_get(swigCPtr);
      return ret;
    } 
  }

  public bool HasControllableRoot {
    get {
      bool ret = NoesisGUI_PINVOKE.Clock_HasControllableRoot_get(swigCPtr);
      return ret;
    } 
  }

  public ClockGroup Parent {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Clock_Parent_get(swigCPtr);
      return (ClockGroup)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  public Timeline Timeline {
    get {
      IntPtr cPtr = NoesisGUI_PINVOKE.Clock_Timeline_get(swigCPtr);
      return (Timeline)Noesis.Extend.GetProxy(cPtr, false);
    }
  }

  private float GetCurrentProgress() {
    float ret = NoesisGUI_PINVOKE.Clock_GetCurrentProgress(swigCPtr);
    return ret;
  }

}

}

