//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class TextureProvider : BaseComponent {
  internal new static TextureProvider CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new TextureProvider(cPtr, cMemoryOwn);
  }

  internal TextureProvider(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(TextureProvider obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  protected TextureProvider() {
  }

  /// <summary> Texture metadata </summary>
  public struct TextureInfo {
    public Int32Rect Rect { get; }
    public float DpiScale { get; } // 96 dpi = 1.0, 72 dpi = 0.75 (72/96), 120 dpi = 1.25 (120/96)

    public TextureInfo(int width = 0, int height = 0): this(0, 0, width, height, 1.0f) {
    }
    public TextureInfo(int x, int y, int width, int height): this(x, y, width, height, 1.0f) {
    }
    public TextureInfo(int x, int y, int width, int height, float dpiScale) {
      Rect = new Int32Rect(x, y, width, height);
      DpiScale = dpiScale;
    }
  }

  /// <summary>
  /// Returns metadata for the texture at the given URI. Returns 0x0 if no texture is found.
  /// </summary>
  public virtual TextureInfo GetTextureInfo(Uri uri) {
    return new TextureInfo();
  }

  /// <summary>
  /// Returns a texture compatible with the given device. Returns null if texture is not found.
  /// </summary>
  public virtual Texture LoadTexture(Uri uri) {
    return null;
  }

  /// <summary>
  /// Notifies of changes to the specified texture file.
  /// </summary>
  public delegate void TextureChangedHandler(Uri uri);
  public event TextureChangedHandler TextureChanged;

  /// <summary>
  /// Raises TextureChanged event notifying Noesis that it should reload the specified texture.
  /// </summary>
  public void RaiseTextureChanged(Uri uri) {
    TextureChanged?.Invoke(uri);
    Noesis_RaiseTextureChanged(swigCPtr, uri.OriginalString);
  }

  [DllImport(Library.Name)]
  private static extern void Noesis_RaiseTextureChanged(HandleRef provider,
    [MarshalAs(UnmanagedType.LPWStr)]string uri);

  internal new static IntPtr Extend(string typeName) {
    return NoesisGUI_PINVOKE.Extend_TextureProvider(Marshal.StringToHGlobalAnsi(typeName));
  }
}

}

