//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.10
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


using System;
using System.Runtime.InteropServices;

namespace Noesis
{

public class DynamicResourceExtension : MarkupExtension {
  internal new static DynamicResourceExtension CreateProxy(IntPtr cPtr, bool cMemoryOwn) {
    return new DynamicResourceExtension(cPtr, cMemoryOwn);
  }

  internal DynamicResourceExtension(IntPtr cPtr, bool cMemoryOwn) : base(cPtr, cMemoryOwn) {
  }

  internal static HandleRef getCPtr(DynamicResourceExtension obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  public DynamicResourceExtension(object key): this(key != null ? key.ToString() : string.Empty) {
  }

  public override object ProvideValue(IServiceProvider serviceProvider) {
    IProvideValueTarget provider = serviceProvider as IProvideValueTarget;
    if (provider != null) {
      object target = provider.TargetObject;
      object prop = provider.TargetProperty;
      IntPtr cPtr = ProvideValueHelper(target, prop as DependencyProperty);
      return Noesis.Extend.GetProxy(cPtr, true);
    }
    return null;
  }

  public DynamicResourceExtension() {
  }

  protected override IntPtr CreateCPtr(Type type, out bool registerExtend) {
    registerExtend = false;
    return NoesisGUI_PINVOKE.new_DynamicResourceExtension__SWIG_0();
  }

  public DynamicResourceExtension(string key) : this(NoesisGUI_PINVOKE.new_DynamicResourceExtension__SWIG_1(key != null ? key : string.Empty), true) {
  }

  private IntPtr ProvideValueHelper(object targetObject, DependencyProperty targetProperty) {
    IntPtr ret = NoesisGUI_PINVOKE.DynamicResourceExtension_ProvideValueHelper(swigCPtr, Noesis.Extend.GetInstanceHandle(targetObject), DependencyProperty.getCPtr(targetProperty));
    return ret;
  }

}

}

